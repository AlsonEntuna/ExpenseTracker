<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:datavis="clr-namespace:System.Windows.Controls.DataVisualization;assembly=DotNetProjects.DataVisualization.Toolkit"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:toolkit="clr-namespace:System.Windows.Controls.DataVisualization.Charting;assembly=DotNetProjects.DataVisualization.Toolkit"
    mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Brushes.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <DropShadowBitmapEffect
        x:Key="DropDownShadow"
        Direction="315"
        Opacity="0.35"
        ShadowDepth="4"
        Softness="0.15"
        Color="{StaticResource Color.Main.Background}" />

    <!--  Main Styles  -->
    <Style x:Key="WindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Background" Value="{DynamicResource Brush.Main.Background}" />
        <!--  Icon - works only if a resource  -->
    </Style>

    <Style x:Key="UserControlStyle" TargetType="{x:Type UserControl}">
        <Setter Property="Background" Value="{DynamicResource Brush.Main.Background}" />
    </Style>

    <!--  All controls  -->
    <Style x:Key="CommonStyle" TargetType="{x:Type Control}">
        <Setter Property="Background" Value="{DynamicResource Brush.Main.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Brush.Main.Text}" />
        <Setter Property="FontFamily" Value="../Fonts/#JetBrains Mono NL" />
        <Setter Property="FontSize" Value="11" />
        <Setter Property="FontStretch" Value="Expanded" />
        <Setter Property="FontStyle" Value="Normal" />
    </Style>

    <!--  Button  -->
    <Style BasedOn="{StaticResource CommonStyle}" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource Brush.Button.Main}" />
        <Setter Property="TextElement.Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Width="auto"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="5"
                        TextBlock.Foreground="{TemplateBinding Foreground}">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.Alt}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource Brush.Button.Disable}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonStyle.Element" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="30" />
        <Setter Property="Background" Value="{StaticResource Brush.Border.Background.Alt}" />
        <Setter Property="TextElement.Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="TextElement.FontSize" Value="12" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Width="auto"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="5"
                        TextBlock.Foreground="{TemplateBinding Foreground}">

                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.Alt}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource Brush.Button.Disable}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ButtonStyle.Main.Large" TargetType="{x:Type Button}">
        <Setter Property="Height" Value="50" />
        <Setter Property="Background" Value="{StaticResource Brush.Button.Main}" />
        <Setter Property="TextElement.Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        Width="auto"
                        Height="{TemplateBinding Height}"
                        Background="{TemplateBinding Background}"
                        CornerRadius="12"
                        TextBlock.Foreground="{TemplateBinding Foreground}">

                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.Alt}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{StaticResource Brush.Button.Disable}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--  TextBox  -->
    <Style x:Key="TextBoxkStyle.Title" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="Background" Value="{StaticResource Brush.Main.Background}" />
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="CornerRadius" Value="3" />
            </Style>
        </Style.Resources>
    </Style>

    <!--  Label / TextBlock  -->
    <ControlTemplate x:Key="LabelTemplate" TargetType="{x:Type Label}">
        <Border>
            <ContentPresenter
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                RecognizesAccessKey="True" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource Brush.Main.Text.Alt}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style BasedOn="{StaticResource CommonStyle}" TargetType="{x:Type Label}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template" Value="{DynamicResource LabelTemplate}" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>

    <!--  TextBlock  -->
    <Style x:Key="TextBlockStyle.Title" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="50" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
    </Style>

    <Style x:Key="TextBlockStyle.Form" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
    </Style>

    <Style x:Key="TextBlockStyle.Header1.Bold" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="28" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
    </Style>

    <Style x:Key="TextBlockStyle.Header1" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="28" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
    </Style>

    <Style x:Key="TextBlockStyle.Header2.Bold" TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="FontSize" Value="22" />
    </Style>

    <Style x:Key="TextBlockStyle.Header2" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="22" />
        <Setter Property="FontWeight" Value="ExtraLight" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
    </Style>

    <Style x:Key="TextBlockStyle.Header2.Alt" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="22" />
        <Setter Property="FontWeight" Value="ExtraLight" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text.Alt}" />
    </Style>

    <!--  GroupBox  -->
    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
    </Style>

    <!--  DataGrid  -->
    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Background" Value="{StaticResource Brush.Main.Background}" />
        <Setter Property="CanUserSortColumns" Value="True" />
        <Setter Property="CanUserResizeColumns" Value="True" />
        <Setter Property="SelectionMode" Value="Extended" />
        <Setter Property="GridLinesVisibility" Value="All" />
        <Setter Property="HeadersVisibility" Value="Column" />
        <Setter Property="CanUserAddRows" Value="False" />
        <Setter Property="AutoGenerateColumns" Value="False" />
    </Style>

    <!--  DataGrid ColumnHeader  -->
    <ControlTemplate x:Key="DataGridColumnHeaderTemplate" TargetType="{x:Type DataGridColumnHeader}">
        <Border Padding="3,0,5,0" Background="{StaticResource Brush.Border.Background.Alt}">
            <ContentPresenter
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                RecognizesAccessKey="True"
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
        </Border>
    </ControlTemplate>
    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="FontSize" Value="12" />
        <Setter Property="FontWeight" Value="Bold" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{DynamicResource DataGridColumnHeaderTemplate}" />
    </Style>

    <!--  Style and template for the DataGridRow.  -->
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock
                        Margin="2,0,0,0"
                        VerticalAlignment="Center"
                        Foreground="Red"
                        Text="!" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border
                        x:Name="DGR_Border"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <SelectiveScrollingGrid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </SelectiveScrollingGrid.ColumnDefinitions>
                            <SelectiveScrollingGrid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </SelectiveScrollingGrid.RowDefinitions>
                            <DataGridCellsPresenter
                                Grid.Column="1"
                                ItemsPanel="{TemplateBinding ItemsPanel}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            <DataGridDetailsPresenter
                                Grid.Row="1"
                                Grid.Column="1"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                Visibility="{TemplateBinding DetailsVisibility}" />
                            <DataGridRowHeader
                                Grid.RowSpan="2"
                                SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                Visibility="{Binding HeadersVisibility, ConverterParameter={x:Static DataGridHeadersVisibility.Row}, Converter={x:Static DataGrid.HeadersVisibilityConverter}, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  Charts  -->
    <Style x:Key="ChartStyle.NoTitle" TargetType="{x:Type datavis:Title}">
        <Setter Property="Visibility" Value="Collapsed" />
    </Style>

    <Style x:Key="ChartStyle.Main" TargetType="{x:Type toolkit:Chart}">
        <Setter Property="PlotAreaStyle">
            <Setter.Value>
                <Style TargetType="{x:Type Grid}">
                    <Setter Property="Background" Value="{StaticResource Brush.Border.Background.Alt}" />
                </Style>
            </Setter.Value>
        </Setter>
    </Style>

    <Style
        x:Key="CustomScrollViewer"
        BasedOn="{StaticResource CommonStyle}"
        TargetType="{x:Type ScrollViewer}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                            <ColumnDefinition Width="Auto" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <ScrollContentPresenter
                            Grid.Row="0"
                            Grid.Column="0"
                            Margin="{TemplateBinding Padding}"
                            CanContentScroll="{TemplateBinding CanContentScroll}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}" />
                        <ScrollBar
                            x:Name="PART_HorizontalScrollBar"
                            Grid.Row="1"
                            Grid.Column="0"
                            AutomationProperties.AutomationId="HorizontalScrollBar"
                            Maximum="{TemplateBinding ScrollableWidth}"
                            Minimum="0"
                            Orientation="Horizontal"
                            ViewportSize="{TemplateBinding ViewportWidth}"
                            Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
                            Value="{Binding Path=HorizontalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                        <ScrollBar
                            x:Name="PART_VerticalScrollBar"
                            Grid.Row="0"
                            Grid.Column="1"
                            AutomationProperties.AutomationId="VerticalScrollBar"
                            Maximum="{TemplateBinding ScrollableHeight}"
                            Minimum="0"
                            Orientation="Vertical"
                            ViewportSize="{TemplateBinding ViewportHeight}"
                            Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
                            Value="{Binding Path=VerticalOffset, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ComboBox  -->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Grid x:Name="Grid">
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                x:Name="BorderAndBackground"
                Grid.ColumnSpan="2"
                Width="Auto"
                Height="Auto"
                Background="{StaticResource Brush.Button.Main}"
                BorderBrush="{StaticResource Brush.Main.Border}"
                BorderThickness="1"
                CornerRadius="2" />
            <Path
                x:Name="Arrow"
                Grid.Column="1"
                Width="15"
                Height="Auto"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                Data="M 4 -1 L 8 3 L 12 -1 Z"
                Fill="{StaticResource Brush.Main.Text}"
                RenderOptions.EdgeMode="Aliased"
                Stretch="None" />
            <Grid
                x:Name="MouseOverGrid"
                Grid.ColumnSpan="2"
                Opacity="0">
                <Border
                    Margin="1"
                    BorderBrush="{StaticResource Brush.Hover1}"
                    BorderThickness="1,1,1,1"
                    CornerRadius="2" />
                <Border
                    Margin="2"
                    BorderBrush="{StaticResource Brush.Hover2}"
                    BorderThickness="1,1,1,1"
                    CornerRadius="2" />
            </Grid>
            <Border
                Grid.Column="1"
                Width="15"
                Height="Auto"
                Background="{x:Null}"
                BorderBrush="{StaticResource Brush.Main.Border}"
                BorderThickness="1,0,0,0"
                CornerRadius="0"
                Opacity="0.5" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter TargetName="MouseOverGrid" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" Value="{StaticResource Brush.Button.Alt}" />
                <Setter TargetName="Arrow" Property="RenderTransform">
                    <Setter.Value>
                        <TranslateTransform X="1" Y="1" />
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text.Alt}" />
                <Setter TargetName="Arrow" Property="Stroke" Value="{StaticResource Brush.Main.Text.Alt}" />
                <Setter TargetName="BorderAndBackground" Property="Background" Value="{StaticResource Brush.Button.Alt}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTextBox" TargetType="{x:Type TextBox}">
        <Border
            x:Name="PART_ContentHost"
            Background="{TemplateBinding Background}"
            Focusable="False" />
        <ControlTemplate.Triggers />
    </ControlTemplate>
    <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Grid x:Name="Grid">
            <ToggleButton
                x:Name="ToggleButton"
                Grid.Column="2"
                ClickMode="Press"
                Focusable="False"
                IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                Template="{DynamicResource ComboBoxToggleButton}" />
            <ContentPresenter
                x:Name="ContentSite"
                Margin="3,3,23,3"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Content="{TemplateBinding SelectionBoxItem}"
                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="False" />
            <TextBox
                x:Name="PART_EditableTextBox"
                Margin="3,3,23,3"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Background="{StaticResource Brush.Main.Background}"
                BorderBrush="{StaticResource Brush.Main.Border}"
                Focusable="True"
                Foreground="{StaticResource Brush.Main.Text}"
                IsReadOnly="{TemplateBinding IsReadOnly}"
                Style="{x:Null}"
                Template="{DynamicResource ComboBoxTextBox}"
                Visibility="Hidden" />
            <Popup
                x:Name="Popup"
                AllowsTransparency="True"
                Focusable="False"
                IsOpen="{TemplateBinding IsDropDownOpen}"
                Placement="Bottom"
                PopupAnimation="Slide">
                <Grid
                    x:Name="DropDown"
                    MinWidth="{TemplateBinding ActualWidth}"
                    MaxHeight="{TemplateBinding MaxDropDownHeight}"
                    Margin="0,0,4,4"
                    SnapsToDevicePixels="True">
                    <Border
                        x:Name="DropDownBorder"
                        Background="{StaticResource Brush.Main.Background}"
                        BitmapEffect="{DynamicResource DropDownShadow}"
                        BorderBrush="{StaticResource Brush.Main.Background}"
                        BorderThickness="1"
                        CornerRadius="3" />
                    <Border
                        Margin="1"
                        Background="{x:Null}"
                        BorderBrush="{StaticResource Brush.Main.Background.Alt}"
                        BorderThickness="1"
                        CornerRadius="3" />
                    <ScrollViewer
                        Margin="2"
                        CanContentScroll="True"
                        Foreground="{DynamicResource {x:Static SystemColors.ActiveCaptionTextBrushKey}}"
                        HorizontalScrollBarVisibility="Auto"
                        SnapsToDevicePixels="True"
                        Style="{DynamicResource CustomScrollViewer}"
                        VerticalScrollBarVisibility="Auto">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                    </ScrollViewer>
                </Grid>
            </Popup>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="False">
                <Setter TargetName="DropDownBorder" Property="FrameworkElement.MinHeight" Value="95" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text.Alt}" />
            </Trigger>
            <Trigger Property="ItemsControl.IsGrouping" Value="True">
                <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
            </Trigger>
            <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                <Setter TargetName="DropDownBorder" Property="Margin" Value="0" />
            </Trigger>
            <Trigger Property="ComboBox.IsEditable" Value="True">
                <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
                <Setter TargetName="PART_EditableTextBox" Property="UIElement.Visibility" Value="Visible" />
                <Setter TargetName="ContentSite" Property="UIElement.Visibility" Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style BasedOn="{StaticResource CommonStyle}" TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template" Value="{DynamicResource ComboBoxTemplate}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="Background" Value="{StaticResource Brush.Button.Main}" />
        <Setter Property="BorderBrush" Value="{StaticResource Brush.Border.Background}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Height" Value="20" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
    <ControlTemplate x:Key="ComboBoxItemTemplate" TargetType="{x:Type ComboBoxItem}">
        <Grid x:Name="Grid" Background="{TemplateBinding Background}">
            <Rectangle
                x:Name="HoverRectangle"
                Fill="{StaticResource Brush.Hover2}"
                IsHitTestVisible="False"
                Opacity="0" />
            <ContentPresenter
                x:Name="contentPresenter"
                Margin="0"
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="UIElement.IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White" />
                <Setter TargetName="HoverRectangle" Property="Opacity" Value="1" />
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text.Alt}" />
            </Trigger>
            <Trigger Property="ComboBoxItem.IsHighlighted" Value="True">
                <Setter Property="Foreground" Value="White" />
                <Setter TargetName="HoverRectangle" Property="Opacity" Value="1" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style BasedOn="{StaticResource CommonStyle}" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template" Value="{DynamicResource ComboBoxItemTemplate}" />
        <Setter Property="Foreground" Value="{StaticResource Brush.Main.Text}" />
        <Setter Property="Background" Value="{StaticResource Brush.Main.Background}" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>
</ResourceDictionary>